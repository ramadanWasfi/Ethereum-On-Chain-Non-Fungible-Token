//SPDX-License-Identifier: MIT

pragma solidity 0.8.26;

import {Test} from "forge-std/Test.sol";
import {DynamicNFT} from "../src/DynamicNFT.sol";
import {console} from "forge-std/console.sol";
import {DeployDynamicNFT} from "../script/DeployDynamicNFT.s.sol";

contract TestDynamicNFT is Test {
    DynamicNFT nft;
    address user1;
    DeployDynamicNFT deployer;
    string private constant NFT_NAME = "Moods";
    string private constant NFT_SYMBOL = "MDS";

    string private constant HAPPY_SCG_URI = "data:application/json;base64,eyJuYW1lIjoiTW9vZHMiLCAiZGVzY3JpcHRpb24iOiJBbiBORlQgdGhhdCByZWZsZWN0cyB0aGUgbW9vZCBvZiB0aGUgb3duZXIsIDEwMCUgb24gQ2hhaW4hIiwgImF0dHJpYnV0ZXMiOiBbeyJ0cmFpdF90eXBlIjogIm1vb2RpbmVzcyIsICJ2YWx1ZSI6IDEwMH1dLCAiaW1hZ2UiOiJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSGh0Ykc1ek9uaHNhVzVyUFNKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eE9UazVMM2hzYVc1cklpQjJaWEp6YVc5dVBTSXhMakVpSUhkcFpIUm9QU0l5TlRZaUlHaGxhV2RvZEQwaU1qVTJJaUIyYVdWM1FtOTRQU0l3SURBZ01qVTJJREkxTmlJZ2VHMXNPbk53WVdObFBTSndjbVZ6WlhKMlpTSStDZ284WkdWbWN6NEtQQzlrWldaelBnbzhaeUJ6ZEhsc1pUMGljM1J5YjJ0bE9pQnViMjVsT3lCemRISnZhMlV0ZDJsa2RHZzZJREE3SUhOMGNtOXJaUzFrWVhOb1lYSnlZWGs2SUc1dmJtVTdJSE4wY205clpTMXNhVzVsWTJGd09pQmlkWFIwT3lCemRISnZhMlV0YkdsdVpXcHZhVzQ2SUcxcGRHVnlPeUJ6ZEhKdmEyVXRiV2wwWlhKc2FXMXBkRG9nTVRBN0lHWnBiR3c2SUc1dmJtVTdJR1pwYkd3dGNuVnNaVG9nYm05dWVtVnlienNnYjNCaFkybDBlVG9nTVRzaUlIUnlZVzV6Wm05eWJUMGlkSEpoYm5Oc1lYUmxLREV1TkRBMk5Ua3pOREEyTlRrek5EQXhOaUF4TGpRd05qVTVNelF3TmpVNU16UXdNVFlwSUhOallXeGxLREl1T0RFZ01pNDRNU2tpSUQ0S0NUeHdZWFJvSUdROUlrMGdORFVnT1RBZ1F5QXlNQzR4T0RjZ09UQWdNQ0EyT1M0NE1UTWdNQ0EwTlNCRElEQWdNakF1TVRnM0lESXdMakU0TnlBd0lEUTFJREFnWXlBeU5DNDRNVE1nTUNBME5TQXlNQzR4T0RjZ05EVWdORFVnUXlBNU1DQTJPUzQ0TVRNZ05qa3VPREV6SURrd0lEUTFJRGt3SUhvZ1RTQTBOU0EwSUVNZ01qSXVNemt6SURRZ05DQXlNaTR6T1RNZ05DQTBOU0J6SURFNExqTTVNeUEwTVNBME1TQTBNU0J6SURReElDMHhPQzR6T1RNZ05ERWdMVFF4SUZNZ05qY3VOakEzSURRZ05EVWdOQ0I2SWlCemRIbHNaVDBpYzNSeWIydGxPaUJ1YjI1bE95QnpkSEp2YTJVdGQybGtkR2c2SURFN0lITjBjbTlyWlMxa1lYTm9ZWEp5WVhrNklHNXZibVU3SUhOMGNtOXJaUzFzYVc1bFkyRndPaUJpZFhSME95QnpkSEp2YTJVdGJHbHVaV3B2YVc0NklHMXBkR1Z5T3lCemRISnZhMlV0YldsMFpYSnNhVzFwZERvZ01UQTdJR1pwYkd3NklISm5ZaWd3TERBc01DazdJR1pwYkd3dGNuVnNaVG9nYm05dWVtVnlienNnYjNCaFkybDBlVG9nTVRzaUlIUnlZVzV6Wm05eWJUMGlJRzFoZEhKcGVDZ3hJREFnTUNBeElEQWdNQ2tnSWlCemRISnZhMlV0YkdsdVpXTmhjRDBpY205MWJtUWlJQzgrQ2drOFkybHlZMnhsSUdONFBTSXpNU0lnWTNrOUlqTTFMalUxSWlCeVBTSTFJaUJ6ZEhsc1pUMGljM1J5YjJ0bE9pQnViMjVsT3lCemRISnZhMlV0ZDJsa2RHZzZJREU3SUhOMGNtOXJaUzFrWVhOb1lYSnlZWGs2SUc1dmJtVTdJSE4wY205clpTMXNhVzVsWTJGd09pQmlkWFIwT3lCemRISnZhMlV0YkdsdVpXcHZhVzQ2SUcxcGRHVnlPeUJ6ZEhKdmEyVXRiV2wwWlhKc2FXMXBkRG9nTVRBN0lHWnBiR3c2SUhKbllpZ3dMREFzTUNrN0lHWnBiR3d0Y25Wc1pUb2dibTl1ZW1WeWJ6c2diM0JoWTJsMGVUb2dNVHNpSUhSeVlXNXpabTl5YlQwaUlDQnRZWFJ5YVhnb01TQXdJREFnTVNBd0lEQXBJQ0l2UGdvSlBHTnBjbU5zWlNCamVEMGlOVGtpSUdONVBTSXpOUzQxTlNJZ2NqMGlOU0lnYzNSNWJHVTlJbk4wY205clpUb2dibTl1WlRzZ2MzUnliMnRsTFhkcFpIUm9PaUF4T3lCemRISnZhMlV0WkdGemFHRnljbUY1T2lCdWIyNWxPeUJ6ZEhKdmEyVXRiR2x1WldOaGNEb2dZblYwZERzZ2MzUnliMnRsTFd4cGJtVnFiMmx1T2lCdGFYUmxjanNnYzNSeWIydGxMVzFwZEdWeWJHbHRhWFE2SURFd095Qm1hV3hzT2lCeVoySW9NQ3d3TERBcE95Qm1hV3hzTFhKMWJHVTZJRzV2Ym5wbGNtODdJRzl3WVdOcGRIazZJREU3SWlCMGNtRnVjMlp2Y20wOUlpQWdiV0YwY21sNEtERWdNQ0F3SURFZ01DQXdLU0FpTHo0S0NUeHdZWFJvSUdROUlrMGdORFVnTmprdU16UTFJR01nTFRjdU9UVTBJREFnTFRFMUxqTXpOeUF0TXk0NU5qa2dMVEU1TGpjMU1TQXRNVEF1TmpFM0lHTWdMVEF1TmpFeElDMHdMamt5SUMwd0xqTTJJQzB5TGpFMk1pQXdMalUySUMweUxqYzNNaUJqSURBdU9USWdMVEF1TmpFeklESXVNVFl5SUMwd0xqTTJJREl1TnpjeUlEQXVOVFlnWXlBekxqWTNNU0ExTGpVeU9TQTVMamd3T1NBNExqZ3pJREUyTGpReE9TQTRMamd6SUdNZ05pNDJNU0F3SURFeUxqYzBPQ0F0TXk0ek1ERWdNVFl1TkRFNUlDMDRMamd6SUdNZ01DNDJNU0F0TUM0NU1qRWdNUzQ0TlNBdE1TNHhOek1nTWk0M056SWdMVEF1TlRZZ1l5QXdMamt5SURBdU5qRWdNUzR4TnpFZ01TNDROVE1nTUM0MU5pQXlMamMzTWlCRElEWXdMak16TnlBMk5TNHpOellnTlRJdU9UVXpJRFk1TGpNME5TQTBOU0EyT1M0ek5EVWdlaUlnYzNSNWJHVTlJbk4wY205clpUb2dibTl1WlRzZ2MzUnliMnRsTFhkcFpIUm9PaUF4T3lCemRISnZhMlV0WkdGemFHRnljbUY1T2lCdWIyNWxPeUJ6ZEhKdmEyVXRiR2x1WldOaGNEb2dZblYwZERzZ2MzUnliMnRsTFd4cGJtVnFiMmx1T2lCdGFYUmxjanNnYzNSeWIydGxMVzFwZEdWeWJHbHRhWFE2SURFd095Qm1hV3hzT2lCeVoySW9NQ3d3TERBcE95Qm1hV3hzTFhKMWJHVTZJRzV2Ym5wbGNtODdJRzl3WVdOcGRIazZJREU3SWlCMGNtRnVjMlp2Y20wOUlpQnRZWFJ5YVhnb01TQXdJREFnTVNBd0lEQXBJQ0lnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lpQXZQZ284TDJjK0Nqd3ZjM1puUGc9PSJ9";

    function setUp() public {
        deployer = new DeployDynamicNFT();
        nft = deployer.run();
        user1 = makeAddr("user1");
    }

    function testMint() public {
        vm.prank(user1);
        nft.mint();
        assertEq(nft.balanceOf(user1), 1, "Token should be minted");
    }

    function testTokenUri() public {
        vm.prank(user1);
        nft.mint();
        assertEq(nft.balanceOf(user1), 1, "Token should be minted");
        string memory uri = nft.tokenURI(0);
        assertEq(keccak256(abi.encodePacked(HAPPY_SCG_URI)), keccak256(abi.encodePacked(uri)));
    }

    function testNFTDeployedCorrectly() public view {
        string memory name = nft.name();
        string memory symbol = nft.symbol();
        assertEq(keccak256(abi.encodePacked(name)) , keccak256(abi.encodePacked(NFT_NAME)));
        assertEq(keccak256(abi.encodePacked(symbol)) , keccak256(abi.encodePacked(NFT_SYMBOL)));
    }


    
}
